<?xml version="1.0" encoding="UTF-8"?>
<ExternalServiceRegistration xmlns="http://soap.sforce.com/2006/04/metadata">
    <label>eLawAPI</label>
    <namedCredentialReference>eLawAPI</namedCredentialReference>
    <operations>
        <active>true</active>
        <name>deleteapicasewatchdeletecasewatch</name>
    </operations>
    <operations>
        <active>true</active>
        <name>deleteapicasewatchdeletecasewatchviewparty</name>
    </operations>
    <operations>
        <active>true</active>
        <name>deleteapinotifypartydeletenotifyparty</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicasetypegetallcasetypes</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicasewatchgetallcasewatches</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicasewatchgetallcasewatcheswithfutureappearances</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicasewatchgetallcasewatcheswithnewappearancechanges</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicasewatchgetcasewatcheswithchange</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicountygetcounty</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicourtgetcourts</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicourtgetcourtsystems</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicustomerbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicustomergetcustomerbygoldenrecordidbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>getapicustomergetcustomerbynetsuiteidbynetsuiteid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>patchapicustomerbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapialertgetalertsformycase</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiappearancegetappearancechangesformycase</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiappearancegetappearancesformycase</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiattorneygetcaseattorneys</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchaddcasewatch</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchaddcasewatchviewparty</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchgetcasechanges</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchgetcasefulldetails</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchgetcasewatches</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchgetcasewatchsummary</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicasewatchgetdocketentries</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicourtsearchcase</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicustomeraddcustomer</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapicustomergetcustomers</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapidocumentgetefiledocumenturl</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiinvoicegetinvoices</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiinvoicegetinvoicesfortaxupdate</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapimotiongetcasemotionbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapimotiongetcasemotions</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapimotiongetmotionchangesformycase</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapinotifypartyaddnotifyparty</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapipaymentaddpayment</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapipaymentgatewaychargecreditcard</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapipaymentgatewaygetpurchasetoken</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapipaymentgatewaygetresponsehash</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiusergetsubscriberdetail</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiuserupdateuserstatus</name>
    </operations>
    <operations>
        <active>true</active>
        <name>postapiuserupdateuserstatusbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>putapicasewatchupdatecasewatchbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>putapicustomerupdatecustomerbyid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>putapiinvoiceupdateinvoicenetsuiteid</name>
    </operations>
    <operations>
        <active>true</active>
        <name>putapiinvoiceupdateinvoicetax</name>
    </operations>
    <operations>
        <active>true</active>
        <name>putapipaymentupdatepaymentnetsuiteid</name>
    </operations>
    <registrationProviderType>Custom</registrationProviderType>
    <schema>{
  &quot;openapi&quot;: &quot;3.0.1&quot;,
  &quot;info&quot;: {
    &quot;title&quot;: &quot;Elaw.Api&quot;,
    &quot;version&quot;: &quot;v1&quot;
  },
  &quot;paths&quot;: {
    &quot;/api/Alert/GetAlertsForMyCase&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Alert&quot;
        ],
        &quot;summary&quot;: &quot;Get Alerts for MyCase on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;NewAlerts is optional - If set to &apos;true&apos; Only New alerts are returned, otherwise all alerts are returned from the day the Case is added to Watch.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Alerts.GetAlertsForMyCase.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Alerts.GetAlertsForMyCase.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Alerts.GetAlertsForMyCase.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Alerts.GetAlertsForMyCase.Alerts&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Alerts.GetAlertsForMyCase.Alerts&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Alerts.GetAlertsForMyCase.Alerts&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Appearance/GetAppearancesForMyCase&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Appearance&quot;
        ],
        &quot;summary&quot;: &quot;Get Appearances for Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;StartDate is optional - If specified, only Appearances scheduled on or after StartDate will be returned. ExcludeMotionAppearances is optional - If set to &apos;true&apos; Motion Appearances are not returned. NewOnly is optional - If set to &apos;true&apos; only Appearances scheduled since the last call to this method.Results ordered by a) Appearances and Conferences in first group, most recent first, b) Motion Appearances in second group, further grouped by Motion (most recent Motion first), most recent Appearance first.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Appearance&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Appearance&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Appearance&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Appearance/GetAppearanceChangesForMyCase&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Appearance&quot;
        ],
        &quot;summary&quot;: &quot;Get Appearance additions, cancellations, and updates for Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;Changes returned since the last call to this method or GetAppearancesForMyCase. Results ordered by earliest change first.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearanceChanges.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearanceChanges.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearanceChanges.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearanceChanges.Appearance&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearanceChanges.Appearance&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearanceChanges.Appearance&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Attorney/GetCaseAttorneys&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Attorney&quot;
        ],
        &quot;summary&quot;: &quot;Get Attorneys for Case on User&apos;s Watch.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Attorney&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Attorney&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Attorney&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseType/GetAllCaseTypes&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;CaseType&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all available Case types based on CourtSystem.&quot;,
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;courtSystem&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseType.GetAllCaseTypes.CaseType&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseType.GetAllCaseTypes.CaseType&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseType.GetAllCaseTypes.CaseType&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/AddCaseWatch&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Add a Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;CourtSystem can either be NY for Supreme court cases or NYC for NYCivil Court Cases or NJ for New Jersey Superior Cases.\r\nIt could either be upper or lower case.The format of the DocketNumber is specific to the courtsystem. For NY it is index/year, For NJ it is county-type-index-Year, For NYCivil it is index-type-year and for Federal it could be index/year or year-cv-index.\r\nCaseType is required for any NY Civil /New Jersey Superior Case and could be left blank for Supreme cases.\r\nIt could be CVN, TSN, SCN, REN, LTN etc. for civil cases and L,DC,LT,SC,DJ,F for New Jersey Superior cases.\r\nLifeOfCase is optional - specify &apos;true&apos; to be billed once for the life of the case,\r\notherwise billing will be monthly. MyCaseName is optional - If not specified &apos;Plaintiff v.\r\nDefendant&apos; is used. ExcludeAllAlerts is optional - specify &apos;true&apos; to receive no email or fax alerts on the Case.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatch.CaseWatch&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatch.CaseWatch&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatch.CaseWatch&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatch.Response&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatch.Response&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatch.Response&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/AddCaseWatchViewParty&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Add a party who is a member of the User&apos;s Account to view the Case Watch.&quot;,
        &quot;description&quot;: &quot;ViewPartyEmail must be the email of a valid elaw user in the Case Watch User&apos;s Account.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatchViewParty.Command&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatchViewParty.Command&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.AddCaseWatchViewParty.Command&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;
          }
        }
      }
    },
    &quot;/api/CaseWatch/DeleteCaseWatch&quot;: {
      &quot;delete&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Delete a Case from User&apos;s Watch.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.DeleteCaseWatch.Command&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.DeleteCaseWatch.Command&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.DeleteCaseWatch.Command&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;
          }
        }
      }
    },
    &quot;/api/CaseWatch/DeleteCaseWatchViewParty&quot;: {
      &quot;delete&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Remove a User From viewing a case on another User&apos;s Watch.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.DeleteCaseWatchViewParty.Command&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.DeleteCaseWatchViewParty.Command&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.DeleteCaseWatchViewParty.Command&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetAllCaseWatches&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all Cases on User&apos;s Watch irrespective of CourtSystem.&quot;,
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetAllCaseWatchesWithFutureAppearances&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all Cases on User&apos;s Watch with future appearances only irrespective of CourtSystem.&quot;,
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithFutureAppearances.CaseWatch&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithFutureAppearances.CaseWatch&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithFutureAppearances.CaseWatch&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetAllCaseWatchesWithNewAppearanceChanges&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all Cases on User&apos;s Watch with new appearance changes irrespective of CourtSystem.&quot;,
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithNewAppearanceChanges.CaseWatch&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithNewAppearanceChanges.CaseWatch&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithNewAppearanceChanges.CaseWatch&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetCaseChanges&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get changes for Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;StartDate is optional - If specified only changes since the specified date are returned, otherwise changes since the last call to this method are returned.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseChanges.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseChanges.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseChanges.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseChanges.CaseChange&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseChanges.CaseChange&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseChanges.CaseChange&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetCaseWatches&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all Cases on User&apos;s Watch by the Specified CourtSystem.&quot;,
        &quot;description&quot;: &quot;CourtSystem can either be NY for Supreme court cases or NYC for NYCivil Court Cases or FED for Federal Court Cases Or NJ for New Jersey Superior Cases. It could be upper case.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                }
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetCaseWatchesWithChange&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all changes for Cases on User&apos;s Watch, since the last call to this method.&quot;,
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithChange.CaseWatchWithChange&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithChange.CaseWatchWithChange&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchesWithChange.CaseWatchWithChange&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetDocketEntries&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get docket or countyclerk minute book changes for Cases on User&apos;s Watch, since the last call to this method.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetDocketEntries.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetDocketEntries.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetDocketEntries.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetDocketEntries.DocketEntries&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetDocketEntries.DocketEntries&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetDocketEntries.DocketEntries&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetCaseWatchSummary&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get details for Case on User&apos;s Watch.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.CaseSummary&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.CaseSummary&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.CaseSummary&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/GetCaseFullDetails&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Get details for Case on User&apos;s Watch.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseFullDetails.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseFullDetails.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseFullDetails.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseFullDetails.Response&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseFullDetails.Response&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseFullDetails.Response&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/CaseWatch/UpdateCaseWatch/{id}&quot;: {
      &quot;put&quot;: {
        &quot;tags&quot;: [
          &quot;CaseWatch&quot;
        ],
        &quot;summary&quot;: &quot;Update Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;CaseName is optional - If not specified the existing value is used. Client is optional.Claim Rep is optional. CliamNumber is optional. Attorney is optional.&quot;,
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;id&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;description&quot;: &quot;&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.UpdateCaseWatch.Command&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.UpdateCaseWatch.Command&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.UpdateCaseWatch.Command&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;
          }
        }
      }
    },
    &quot;/api/County/GetCounty&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;County&quot;
        ],
        &quot;summary&quot;: &quot;Get Counties in Court System.&quot;,
        &quot;description&quot;: &quot;The CourtSystemCode could be either CourtSystem can either be NY for Supreme court cases or NYC for NYCivil Court Cases or FED for Federal Court Cases Or NJ for New Jersey Superior Cases. It could be upper case.&quot;,
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;courtSystem&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;description&quot;: &quot;&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CourtCounty.GetCounty.County&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CourtCounty.GetCounty.County&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CourtCounty.GetCounty.County&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Court/GetCourts&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;Court&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all supported Courts.&quot;,
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetCourts.Court&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetCourts.Court&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetCourts.Court&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Court/GetCourtSystems&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;Court&quot;
        ],
        &quot;summary&quot;: &quot;Get list of all supported Court Systems.&quot;,
        &quot;description&quot;: &quot;The CourtSystemCode returned is used by many of the Case related calls.&quot;,
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;court&quot;,
            &quot;in&quot;: &quot;query&quot;,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetCourtSystems.Court&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetCourtSystems.Court&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetCourtSystems.Court&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Court/SearchCase&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Court&quot;
        ],
        &quot;summary&quot;: &quot;Get details for Case.&quot;,
        &quot;description&quot;: &quot;CourtSystem can either be NY for Supreme court cases or NYC for NYCivil Court Cases or FED for Federal Court Cases Or NJ for New Jersey Superior Cases. It could either be upper or lower case.All parameters are required. Year may be specified as 2 or 4 digits. CaseType is required for any NY Civil /New Jersey Superior Case and could be left blank for Supreme cases. It could be CVN, TSN, SCN, REN, LTN etc. for civil cases and L,DC,LT,SC,DJ,F for New Jersey Superior cases.\r\n&lt;br&gt;&lt;/br&gt;&lt;br&gt;Sample formats for docket numbers -  NY : 123/99 , NYC : CVU-00123-99, NJ : UNN-L-00123-99, FED : 99-CV-123 &lt;/br&gt;&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetSearchCase.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetSearchCase.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetSearchCase.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetSearchCase.CaseSummary&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetSearchCase.CaseSummary&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Court.GetSearchCase.CaseSummary&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Customer/AddCustomer&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.Customer&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.Customer&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.Customer&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.CustomerResponse&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.CustomerResponse&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.CustomerResponse&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Customer/GetCustomer/ByGoldenRecordId/{id}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;id&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              }
            }
          },
          &quot;204&quot;: {
            &quot;description&quot;: &quot;No Content&quot;
          }
        }
      }
    },
    &quot;/api/Customer/GetCustomer/ByNetSuiteId/{netSuiteId}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;netSuiteId&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;integer&quot;,
              &quot;format&quot;: &quot;int32&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              }
            }
          },
          &quot;204&quot;: {
            &quot;description&quot;: &quot;No Content&quot;
          }
        }
      }
    },
    &quot;/api/Customer/{id}&quot;: {
      &quot;get&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;id&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          }
        ],
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              }
            }
          },
          &quot;204&quot;: {
            &quot;description&quot;: &quot;No Content&quot;
          }
        }
      },
      &quot;patch&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;id&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: { }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: { }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: { }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;
                }
              }
            }
          },
          &quot;204&quot;: {
            &quot;description&quot;: &quot;No Content&quot;
          }
        }
      }
    },
    &quot;/api/Customer/GetCustomers&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.Customer&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.Customer&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.Customer&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Customer/UpdateCustomer/{id}&quot;: {
      &quot;put&quot;: {
        &quot;tags&quot;: [
          &quot;Customer&quot;
        ],
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;id&quot;,
            &quot;in&quot;: &quot;path&quot;,
            &quot;required&quot;: true,
            &quot;schema&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;format&quot;: &quot;uuid&quot;
            }
          }
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.Customer&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.Customer&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.Customer&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.Customer&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.Customer&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.Customer&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Document/GetEFileDocumentUrl&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Document&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Document.GetEFileDocumentUrl.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Document.GetEFileDocumentUrl.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Document.GetEFileDocumentUrl.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Document.GetEFileDocumentUrl.Document&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Document.GetEFileDocumentUrl.Document&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Document.GetEFileDocumentUrl.Document&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Invoice/GetInvoices&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Invoice&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoices.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoices.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoices.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Response.PagedResponse`1[[Core.Features.Invoices.GetInvoices.Invoice, Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Response.PagedResponse`1[[Core.Features.Invoices.GetInvoices.Invoice, Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Response.PagedResponse`1[[Core.Features.Invoices.GetInvoices.Invoice, Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Invoice/UpdateInvoiceNetSuiteId&quot;: {
      &quot;put&quot;: {
        &quot;tags&quot;: [
          &quot;Invoice&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;
                }
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;
                }
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;
                }
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Invoice/GetInvoicesForTaxUpdate&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Invoice&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoicesForTaxUpdate.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoicesForTaxUpdate.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoicesForTaxUpdate.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoicesForTaxUpdate.PendingTaxInvoice&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoicesForTaxUpdate.PendingTaxInvoice&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoicesForTaxUpdate.PendingTaxInvoice&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Invoice/UpdateInvoiceTax&quot;: {
      &quot;put&quot;: {
        &quot;tags&quot;: [
          &quot;Invoice&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax&quot;
                }
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax&quot;
                }
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax&quot;
                }
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.TaxResponse&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.TaxResponse&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.TaxResponse&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Motion/GetCaseMotionById&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Motion&quot;
        ],
        &quot;summary&quot;: &quot;Get Motion By Id.&quot;,
        &quot;description&quot;: &quot;You can get Motion Information by calling GetCaseMotionById. Motion Information is available for any Supreme court case/ New Jersey Superior case.&quot;,
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotionById.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotionById.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotionById.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Motion/GetCaseMotions&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Motion&quot;
        ],
        &quot;summary&quot;: &quot;Get Motions for Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;ExcludeAppearances is optional - If set to &apos;true&apos; Motion Appearances are not returned, otherwise they are returned as child nodes of related parent Motion. Results ordered by most recent Motion first.Motion information is available for any Supreme court case /New Jersey Superior case.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Motion/GetMotionChangesForMyCase&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Motion&quot;
        ],
        &quot;summary&quot;: &quot;Get Motion changes based on cancellations or updates for Case on User&apos;s Watch.&quot;,
        &quot;description&quot;: &quot;StartDate is optional- Changes returned since the last call or StartDate passed to this method. Results ordered by earliest change first.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetMotionChanges.Query&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetMotionChanges.Query&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetMotionChanges.Query&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetMotionChanges.Motion&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetMotionChanges.Motion&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetMotionChanges.Motion&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/NotifyParty/AddNotifyParty&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;NotifyParty&quot;
        ],
        &quot;summary&quot;: &quot;Add a Notify Party on User&apos;s existing Case Watch to receive email alerts.&quot;,
        &quot;description&quot;: &quot;Additional notify parties will be alerted only if the Case Watch User is alerted, which is determined by setting the ExcludeAlerts Flag to &apos;N&apos; while adding Case Watch or by editing CaseWatch on the Website Elaw.com.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.NotifyParty.AddNotifyParty.Command&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.NotifyParty.AddNotifyParty.Command&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.NotifyParty.AddNotifyParty.Command&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;
          }
        }
      }
    },
    &quot;/api/NotifyParty/DeleteNotifyParty&quot;: {
      &quot;delete&quot;: {
        &quot;tags&quot;: [
          &quot;NotifyParty&quot;
        ],
        &quot;summary&quot;: &quot;Delete an existing Notify Party from User&apos;s Case Watch.&quot;,
        &quot;description&quot;: &quot;The Case Watch user&apos;s email cannot be deleted (To stop getting alerts edit the Case Watch on Elaw.com website or delete the case watch). All fields are required.&quot;,
        &quot;requestBody&quot;: {
          &quot;description&quot;: &quot;&quot;,
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.NotifyParty.DeleteNotifyParty.Command&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.NotifyParty.DeleteNotifyParty.Command&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.NotifyParty.DeleteNotifyParty.Command&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;
          }
        }
      }
    },
    &quot;/api/Payment/AddPayment&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;Payment&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payment.AddPayment.Payment&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payment.AddPayment.Payment&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payment.AddPayment.Payment&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;boolean&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;boolean&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;boolean&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/Payment/UpdatePaymentNetSuiteId&quot;: {
      &quot;put&quot;: {
        &quot;tags&quot;: [
          &quot;Payment&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;
                }
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;
                }
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;type&quot;: &quot;array&quot;,
                &quot;items&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;
                }
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;
                  }
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;
                  }
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;type&quot;: &quot;array&quot;,
                  &quot;items&quot;: {
                    &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;
                  }
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/PaymentGateway/GetPurchaseToken&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;PaymentGateway&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetPurchaseToken.Request&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetPurchaseToken.Request&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetPurchaseToken.Request&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetPurchaseToken.Response&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetPurchaseToken.Response&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetPurchaseToken.Response&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/PaymentGateway/GetResponseHash&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;PaymentGateway&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetResponseHash.Request&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetResponseHash.Request&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetResponseHash.Request&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetResponseHash.Response&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetResponseHash.Response&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.GetResponseHash.Response&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/PaymentGateway/ChargeCreditCard&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;PaymentGateway&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.ChargeCreditCard.Request&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.ChargeCreditCard.Request&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.ChargeCreditCard.Request&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.ChargeCreditCard.Response&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.ChargeCreditCard.Response&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.PaymentGateway.ChargeCreditCard.Response&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/User/GetSubscriberDetail&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;User&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.GetSubscriberDetail.Subscriber&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.GetSubscriberDetail.Subscriber&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.GetSubscriberDetail.Subscriber&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.GetSubscriberDetail.User&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.GetSubscriberDetail.User&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.GetSubscriberDetail.User&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/User/UpdateUserStatus&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;User&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatus.Request&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatus.Request&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatus.Request&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatus.User&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatus.User&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatus.User&quot;
                }
              }
            }
          }
        }
      }
    },
    &quot;/api/User/UpdateUserStatusById&quot;: {
      &quot;post&quot;: {
        &quot;tags&quot;: [
          &quot;User&quot;
        ],
        &quot;requestBody&quot;: {
          &quot;content&quot;: {
            &quot;application/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatusById.Request&quot;
              }
            },
            &quot;text/json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatusById.Request&quot;
              }
            },
            &quot;application/*+json&quot;: {
              &quot;schema&quot;: {
                &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatusById.Request&quot;
              }
            }
          }
        },
        &quot;responses&quot;: {
          &quot;200&quot;: {
            &quot;description&quot;: &quot;Success&quot;,
            &quot;content&quot;: {
              &quot;text/plain&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatusById.User&quot;
                }
              },
              &quot;application/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatusById.User&quot;
                }
              },
              &quot;text/json&quot;: {
                &quot;schema&quot;: {
                  &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.User.UpdateUserStatusById.User&quot;
                }
              }
            }
          }
        }
      }
    }
  },
  &quot;components&quot;: {
    &quot;schemas&quot;: {
      &quot;Core.Extensions.GetCustomerExtensions.BillTo&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;address1&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;address2&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attentionTo&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;city&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;state&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;zipCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Extensions.GetCustomerExtensions.CustomerResponse&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;accountNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;billTo&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Extensions.GetCustomerExtensions.BillTo&quot;
          },
          &quot;billToEmail&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;customerName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;dateCreated&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;dateUpdated&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fax&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;invoiceCount&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;isActive&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;isNetSuiteCustomer&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;netSuiteId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;phone&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Alerts.GetAlertsForMyCase.Alerts&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;messageDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;subject&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;message&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Alerts.GetAlertsForMyCase.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;newAlerts&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Appearances.GetAppearanceChanges.Appearance&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;transactionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;physicalTable&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;physicalField&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;table&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;field&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;appearanceId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;changeDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;motionId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;appearanceDateTime&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionSequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;sequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;series&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtRoom&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;part&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;judge&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;action&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;appearanceType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionRelief&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;comment&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseID&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;calendarRemarks&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;beforeValue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;afterValue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Appearances.GetAppearanceChanges.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;startDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Appearances.GetAppearances.Appearance&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;appearanceId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;appearanceDateTime&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionSequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;sequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;series&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtRoom&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;part&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;judge&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;action&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;appearanceType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionRelief&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;comment&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;createDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;updateDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;time&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;calendarRemarks&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Appearances.GetAppearances.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;excludeMotionAppearances&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;nullable&quot;: true
          },
          &quot;newOnly&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;nullable&quot;: true
          },
          &quot;startDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Attorney.GetAttorneys.Attorney&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;sequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;for&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;firm&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Attorney.GetAttorneys.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseType.GetAllCaseTypes.CaseType&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;countyName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtCaseType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;description&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;groupTypeCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.AddCaseWatch.CaseWatch&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimRep&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clientMatter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;countyName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemCode&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Util.CourtSystemData&quot;
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;excludeAllAlerts&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;nullable&quot;: true
          },
          &quot;lifeOfCase&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;nullable&quot;: true
          },
          &quot;myCaseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.AddCaseWatch.Response&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;cashWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.AddCaseWatchViewParty.Command&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;viewPartyEmail&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.DeleteCaseWatch.Command&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.DeleteCaseWatchViewParty.Command&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;viewPartyEmail&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseChanges.CaseChange&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;transactionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;table&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;field&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;primaryKey&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;beforeValue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;afterValue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;changeDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseChanges.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;startDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseFullDetails.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseFullDetails.Response&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseSummaries&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.CaseWatch.GetCaseWatchSummary.CaseSummary&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;appearances&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Appearance&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;motions&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Motions.GetCaseMotions.Motion&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;attorneys&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Attorney.GetAttorneys.Attorney&quot;
            },
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseWatchSummary.CaseSummary&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;countyName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;plaintiff&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;defendant&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseTypeDescription&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;dispositionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;dispositionDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;calendarNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;prelimCalendarNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;actionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;damageType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;iasJustice&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;iasJusticePart&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;iasCategory&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;complexity&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;specialPreference&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;previousCase&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;nextCase&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;rjiFiled&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;rjiType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;rjiOtherTypeComment&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;rjiPartNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;rjiDispDeadline&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;rjinoiDeadline&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;noiFiled&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;issueJoined&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;noiDispDeadline&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;juryStatus&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;estimatedTrialTime&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;noiDue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxSectionNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxBlockNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxLotNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxSchoolDistrict&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxAssessmentAmount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxAwardAmount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;taxLandUse&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtIndexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fullPlaintiffName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fullDefendantName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;createdDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;updatedDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;disoveryEndDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;discoveryDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseTitle&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseWatchSummary.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseWatches.CaseWatch&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;appearancesLastDownloaded&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimRep&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clientMatter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;county&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtIndexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;defendant&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;myCaseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;plaintiff&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseWatchesWithChange.CaseWatchWithChange&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;county&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clientMatter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;courtIndexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimRep&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseWatchesWithFutureAppearances.CaseWatch&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;appearancesLastDownloaded&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimRep&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clientMatter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;county&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtIndexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;defendant&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;myCaseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;plaintiff&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetCaseWatchesWithNewAppearanceChanges.CaseWatch&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;appearancesLastDownloaded&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimRep&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clientMatter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;county&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtIndexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtSystemName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;defendant&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;myCaseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;plaintiff&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetDocketEntries.DocketEntries&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;countyClerkMinutesId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1County&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1Year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1IndexNumber&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1SequenceNumber&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1Date&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1TextA&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1TextB&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1TextC&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1ProofSVC&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1ModDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;createdDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;updatedDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;minutes1Series&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtDocumentStatus&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;countyClerkCaseId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;countyClerkAccountId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;elawCaseId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseIndex&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;county&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketEntry&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;filingParty&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;comments&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;countyName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fedYear&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;sequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;date&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;textLine1&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;textLine2&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;textLine3&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.GetDocketEntries.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CaseWatch.UpdateCaseWatch.Command&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimRep&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clientMatter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;myCaseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Court.GetCourtSystems.Court&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;code&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Court.GetCourts.Court&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;code&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Court.GetSearchCase.CaseSummary&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;countyName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;index&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;plaintiff&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;defendant&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;dispositionDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;courtIndexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Court.GetSearchCase.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;courtSystemCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;countyName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;docketNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.CourtCounty.GetCounty.County&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;abbreviation&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;code&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.AddCustomer.BillTo&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;address1&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;address2&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;city&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;state&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;zipCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.AddCustomer.Customer&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;billTo&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.AddCustomer.BillTo&quot;
          },
          &quot;customerName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fax&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;firstName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;isAttorney&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;lastName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;middleName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuiteId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;password&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;phone&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;userName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.AddCustomer.CustomerResponse&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;validationCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.GetCustomers.BillTo&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;address1&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;address2&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attentionTo&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;city&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;state&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;zipCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.GetCustomers.Customer&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;accountNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;billTo&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.GetCustomers.BillTo&quot;
          },
          &quot;billToEmail&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;type&quot;: &quot;string&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;customerName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;dateCreated&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;dateUpdated&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fax&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;id&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;invoiceCount&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;isActive&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;isNetSuiteCustomer&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;netSuiteId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;phone&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.GetCustomers.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;startDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;endDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;excludeCustomersUpdatedByMe&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;default&quot;: false
          },
          &quot;includeInactive&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;default&quot;: false
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.UpdateCustomer.BillTo&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;address1&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;address2&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;attentionTo&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;city&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;state&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;zipCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Customer.UpdateCustomer.Customer&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;billTo&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Customer.UpdateCustomer.BillTo&quot;
          },
          &quot;customerName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fax&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;phone&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuiteId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Document.GetEFileDocumentUrl.Document&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;documetUrl&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Document.GetEFileDocumentUrl.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.GetInvoices.Invoice&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;documentDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;invoicedAmount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;invoiceName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;invoiceNumber&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;lineItems&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoices.LineItem&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;netSuiteCustomerId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuiteInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.GetInvoices.LineItem&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;attorney&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;claimNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;client&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;comments&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;county&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;court&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;forthrightNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;indexNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;invoice&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoices.Invoice&quot;
          },
          &quot;invoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;itemCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;matter&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;policyNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;quantity&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;price&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;tax&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;salesDescription&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;source&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;transactionDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;transactionId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;userText&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;year&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.GetInvoices.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;pageNumber&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageSize&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuiteCustomerId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;startInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;endInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;fromInvoiceDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;toInvoiceDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.GetInvoicesForTaxUpdate.PendingTaxInvoice&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;invoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;netSuiteInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;invoiceAmount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.GetInvoicesForTaxUpdate.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;fromInvoiceDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;toInvoiceDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;startInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;endInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuiteCustomerId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuiteInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.UpdateInvoiceNetSuiteId.Invoice&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;invoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;netSuiteInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;invoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int64&quot;
          },
          &quot;netSuiteInvoiceId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;avalaraId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;lineItems&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax.LineItem&quot;
            },
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax.LineItem&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;id&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;itemCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;amount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;taxAmount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;taxRate&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Invoices.UpdateInvoiceTax.TaxResponse&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;invoiceTax&quot;: {
            &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.UpdateInvoiceTax.InvoiceTax&quot;
          },
          &quot;success&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          },
          &quot;errorMessage&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Motions.GetCaseMotionById.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;motionId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Motions.GetCaseMotions.Motion&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;motionId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;sequence&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;date&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;reliefSought&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;decisionDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;decisionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;decisionComment&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;status&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;proceedingType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;partyFor&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;effect&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;judge&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;clerkNotified&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;consolidatedIndex&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;,
            &quot;nullable&quot;: true
          },
          &quot;consolidatedCalendar&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;transferComment&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;referralDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;referralPart&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;originalPart&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;orderSigned&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;createdDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;updatedDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionComment1&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionComment2&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;lastAppearance&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;nextAppearance&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionRejectedDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseMotionAppearances&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Appearances.GetAppearances.Appearance&quot;
            },
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Motions.GetCaseMotions.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;excludeAppearances&quot;: {
            &quot;type&quot;: &quot;boolean&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Motions.GetMotionChanges.Motion&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;transactionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;physicalTable&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;physicalField&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;table&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;field&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;motionId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;date&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          },
          &quot;changeDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;
          },
          &quot;caseID&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;beforeValue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;afterValue&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Motions.GetMotionChanges.Query&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;startDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;date-time&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.NotifyParty.AddNotifyParty.Command&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;destinationType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;recipient&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.NotifyParty.DeleteNotifyParty.Command&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;caseWatchId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Payment.AddPayment.Payment&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;authorizationCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;checkNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;cost&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;goldenRecordId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          },
          &quot;invoiceNumber&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;netSuitePaymentId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;,
            &quot;nullable&quot;: true
          },
          &quot;paymentTypeCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;subscriptionId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;web&quot;: {
            &quot;type&quot;: &quot;boolean&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.PaymentGateway.ChargeCreditCard.Request&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;merchantName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;cardType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;cardNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;cardHoldersName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;expirationDate&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;amount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;zipCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;referenceNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;transactionType&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.PaymentGateway.ChargeCreditCard.Response&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;authorizationCode&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;message&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;errorMessage&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;cardNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.PaymentGateway.GetPurchaseToken.Request&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;merchantName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;paymentConfirmURL&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;referenceNumber&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;relayResponseURL&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;amount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          },
          &quot;email&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.PaymentGateway.GetPurchaseToken.Response&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;purchaseToken&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.PaymentGateway.GetResponseHash.Request&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;merchantName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;transactionId&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;amount&quot;: {
            &quot;type&quot;: &quot;number&quot;,
            &quot;format&quot;: &quot;double&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.PaymentGateway.GetResponseHash.Response&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;hash&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.Payments.UpdatePaymentNetSuiteId.Payment&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;netSuitePaymentId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;paymentId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.User.GetSubscriberDetail.Subscriber&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;subscriberToken&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.User.GetSubscriberDetail.User&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;userEmail&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;userName&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: true
          },
          &quot;emailSendStatus&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;userIdentifier&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          },
          &quot;userStatusId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.User.UpdateUserStatus.Request&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;subscriberToken&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.User.UpdateUserStatus.User&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;userStatusId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;subscriberToken&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;,
            &quot;nullable&quot;: true
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.User.UpdateUserStatusById.Request&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;identifier&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Features.User.UpdateUserStatusById.User&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;userId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;customerId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;userStatusId&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;identifier&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;format&quot;: &quot;uuid&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Response.PagedResponse`1[[Core.Features.Invoices.GetInvoices.Invoice, Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]&quot;: {
        &quot;type&quot;: &quot;object&quot;,
        &quot;properties&quot;: {
          &quot;pageNumber&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;pageSize&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;results&quot;: {
            &quot;type&quot;: &quot;array&quot;,
            &quot;items&quot;: {
              &quot;$ref&quot;: &quot;#/components/schemas/Core.Features.Invoices.GetInvoices.Invoice&quot;
            },
            &quot;nullable&quot;: true
          },
          &quot;totalPages&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          },
          &quot;totalResults&quot;: {
            &quot;type&quot;: &quot;integer&quot;,
            &quot;format&quot;: &quot;int32&quot;
          }
        },
        &quot;additionalProperties&quot;: false
      },
      &quot;Core.Util.CourtSystemData&quot;: {
        &quot;enum&quot;: [
          &quot;NJ&quot;,
          &quot;FED&quot;,
          &quot;NY&quot;,
          &quot;NYC&quot;
        ],
        &quot;type&quot;: &quot;string&quot;
      }
    },
    &quot;securitySchemes&quot;: {
      &quot;Bearer&quot;: {
        &quot;type&quot;: &quot;apiKey&quot;,
        &quot;description&quot;: &quot;JWT Authorization header using the Bearer scheme. \r\n\r\n Enter &apos;Bearer&apos; [space] and then your token in the text input below.\r\n\r\nExample: \&quot;Bearer 12345abcdef\&quot;&quot;,
        &quot;name&quot;: &quot;Authorization&quot;,
        &quot;in&quot;: &quot;header&quot;
      }
    }
  },
  &quot;security&quot;: [
    {
      &quot;Bearer&quot;: [ ]
    }
  ]
}</schema>
    <schemaAbsoluteUrl>https://api.stage.elaw.com/swagger/v1/swagger.json</schemaAbsoluteUrl>
    <schemaType>OpenApi3</schemaType>
    <serviceBinding>{&quot;host&quot;:&quot;&quot;,&quot;basePath&quot;:&quot;/&quot;,&quot;allowedSchemes&quot;:[],&quot;requestMediaTypes&quot;:[],&quot;responseMediaTypes&quot;:[],&quot;compatibleMediaTypes&quot;:{}}</serviceBinding>
    <status>Complete</status>
    <systemVersion>4</systemVersion>
</ExternalServiceRegistration>
